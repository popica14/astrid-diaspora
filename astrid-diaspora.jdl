entity AstridProject{
	name String required
    shortDescription TextBlob required
    neededAmount String
    currentAmount String
    supporters Integer
    goal String required
    statusReason String required
    statusDeadline ZonedDateTime
    documentation1 AnyBlob
    documentation2 AnyBlob
    documentation3 AnyBlob
    documentation4 AnyBlob
    documentation5 AnyBlob
}

entity AstridProjectSuggestion{
	name String required
    shortDescription TextBlob required
    goal String required
    documentation1 AnyBlob
    documentation2 AnyBlob
    documentation3 AnyBlob
    documentation4 AnyBlob
    documentation5 AnyBlob
}

entity AstridUser{
	phoneNumber String required pattern(/^(\+\d{1,2}\s)?\(?\d{3}\)?[\s.-]\d{3}[\s.-]\d{4}$/)
    residency String required
    gender Gender required
    birthDate ZonedDateTime required
    highestEducation Education required
}

entity Beneficiary{
	name String required
    type BeneficiaryType required
    address String
    phoneNumber String required
    email String required
    contactPerson String 
}

entity Location{
	name String required
    county String required
    address String
}

enum Gender{
	FEMALE, MALE, PREFER_NOT_TO_ANSWER
}

enum BeneficiaryType{
	PRIVATE_PERSON, PUBLIC_INSTITUTION, PRIVATE_INSTITUTION
}

enum Education{
	
    DOCTORATE,
    NO_FORMAL_EDUCATION,
    BACHELOR,
    PRIMARY,
    SECONDARY_HIGH_SCHOOL,
    MASTER,
    PREFER_NOT_TO_ANSWER
}

entity ProjectStatus{
	name String required
    daysToNotification Integer required
    order Integer required
}

entity EntityCreation{
	created ZonedDateTime required
}

entity Currency{
	name String
    symbol String
}

entity EntityLastModification{
	lastModified ZonedDateTime
}

relationship ManyToOne {
	AstridProject{responsible(login) required} to User 
	AstridProject{initiator(login)} to User 
	AstridProjectSuggestion{initiator(login)} to User 
	AstridProject{status(name) required} to ProjectStatus 
	AstridProjectSuggestion{status(name)} to ProjectStatus
	AstridProject{location(name)} to Location
	EntityLastModification{lastModifiedBy(login) required} to User
	EntityCreation{createdBy(login) required} to User
	AstridProject{currency(name)} to Currency
}

/**
 * One to one relationship.
 */
relationship OneToOne {
	AstridProject to EntityCreation
	AstridProject to EntityLastModification
    AstridUser to User
}

relationship ManyToMany {	
	AstridProject{implementationTeam(login)} to User
	AstridProject{beneficiaries(name)} to Beneficiary{projects(name)}
}


// Set pagination options
paginate AstridProject with infinite-scroll

// Use Data Transfer Objects (DTO)
dto * with mapstruct

// Set service options to all except few
service all with serviceImpl